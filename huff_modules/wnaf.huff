#include "endomorphism.huff"
#include "constants.huff"

// starting stack state w o v 260 0x1fe0 16 mask
#define WNAF_SLICE_B = takes(6) returns(6) {
    dup1 dup1 returndatasize sub and
    // w' w o v 269 0x1fe0 16 mask
    dup9 dup2 mod
    // (w' % 269) w' w o v 269 0x1fe0 16 mask
    mload dup11 and
    // x w' w o v
    swap2
    // w w' x o v
    div
    // w" x o v
    swap2
    // o x w"
    add
    // o' w" v x x x 269 0x1fe0 16 mask
    dup2 dup11 add dup12 and
    // w''' o' w"
    swap2
    // w" o' w''' v
    0xff and dup4 add
    // w" o' w''' v
    dup2
    // o' w" o' w'''
    dup1 mload
    // f o' w'' o' w'''
    0x10000000000000000000000000000000000000000000000000000000000000000 add
    // f' o' w'' o' w'''
    dup1 dup3 mstore
    // f' o' w'' o' w'''
    returndatasize byte add
    // o'' w'' o' w'''
    mstore8
    // o' w'''
    swap1
}

#define WNAF_SLICE_EXPERIMENTAL = takes(6) returns(6) {
    dup1 dup1 returndatasize sub and // w' w o v
    swap1                            // w w' o v
    dup9 dup2 mod                    // (w' % 269) w' w o v 269 0x1fe0 16 mask
    mload dup11 and                  // x w' w o v
    dup4 dup2 add swap4 pop          // x w' w o' v (TODO REFACTOR)
    dup1 mload                       // f x w' w v
    0x10000000000000000000000000000000000000000000000000000000000000000 add // f' x o w' w v
    dup1 dup3 mstore                 // f' x w' w v
    0 byte                           // a x w' w o v
    add                              // b w' w o v
    dup4 add                         // b w' w o v
    swap2 div                        // w b o v
    swap1                            // b w o v
    dup2 dup5 add                    // w b w o v
    swap1 mstore8                    // w o v 269 0x1fe0 16 mask
    dup6 add
}
// starting stack state o w 260 0x1fe0 16 mask
/**
 * @title single iteration of width-non-adjacent-form algorithm
 * @dev Starting stack state = o w c_269 c_0x1fe0 c_16 c_mask
 * We have two 'slice' macros that do the same thing, but variables 'o' and 'w'
 * have reversed stack positions. This is to reduce the number of swap ops we use.
 * We use 4 constants in this macro, which we require on the stack instead of using PUSH ops.
 * This is to reduce the code size of this macro (PUSH is at least 2 bytes, other opcodes are a single byte)
 * @param o current memory offset to latest wnaf entry
 * @param w the scalar we're creating our wnaf from
 * @param c_269 the integer '269' (base 10), used in a lookup table
 * @param c_0x1fe0 the integer '1fe0' (base 16), used as a mask in our lookup table
 * @param c_16 the integer '16' (base 10), used to mutate ```w``` for next iteration cycle
 * @param c_mask 256-bit integer with all bits set high, except the least significant 5 bits
 **/
#define WNAF_SLICE_A = takes(6) returns(6) {
    // Step 1: we need to isolate the least significant high bit of w
    // Can do this by taking w & -w
    // Instead of pushing '0' onto the stack (3 gas), we can get the 'return data size' of this EVM execution context.
    // As this contract doesn't call external contracts this will always be 0, and the opcode costs 2 gas.
    dup2 dup1 returndatasize sub and // stack state: w' o w

    // Step 2: use w' and the lookup table to calculate the bit index of the high bit in w'
    // We want to add this offset to 'o', which is our accumulated memory offset
    // So swap 'o' to the front of the stak in preparation
    swap1 // stack state: o w' w 269 0x1fe0 16 mask

    // We want to calculate w' mod 269; the literal needs to preceed w' so push it onto the stack
    // before duplicating w' (we don't consume w' as we need it later) and taking the modulus
    dup8 dup3 mod // stack state: (w' % 269) o w' w 269 0x1fe0 16 mask

    // use the result to byte-address the lookup table we stored
    // and mask off the byte corresponding to the bit index,
    // we use 0x1fe0 instead of 0xff because the table entry is shifted by 5 bits
    // this is because we use this value to address words in memory, so '1' needs to be '32'
    mload dup10 and // stack state: x o w' w

    // Tadaa, we have our index, no conditional branching in sight
    // We need this value to find the current byte-offset to store our wnaf, so add it straight to 'o'
    add // stack state: o' w' w

    // Now we know *where* to store the next wnaf section, we need to figure out *what* to store
    // Our scalar has an abritrary amount of leading 0 bits we need to remove, we can use w' as
    // our divisor without explicitly figuring out how many bits need to be culled
    swap2 // stack state: w w' o'
    div  // stack state: w o'

    // We want to store our wnaf entry at byte position 'o'.
    // We've divided w by the least significant bit in w, so we know that
    // our wnaf entry is in the least significant 5 bits of 'w'.
    // Instead of masking off the higher order bits, we can use mstore8
    // to store the least significant byte of 'w' at position 'o'.
    // We're storing multiple wnaf entries in a single EVM word, so it's cheaper
    // to mask off the unwanted 3 high bits per-evm-word, which we can do in the main loop
    dup1 dup3 mstore8 // stack state: w o' 269 0x1fe0 16 mask

    // We need to prepare our scalar for the next round of iteration
    // We've already stored the next 5 bits of the wnaf in our fragment at memory offset 'o'
    // So we need to zero out the 5 least significant bits of w so we don't double-count.

    // i.e. we calculate  w = (w & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    // (the literal has every bit set high except the least significant 5)

    // There is one catch. If our wnaf fragment is negative (> 15), we need to add 2^{w} (32) to the scalar w.
    // This is because we're subtracting (32 - m) at this bit position.
    // So we need to add in 32 at the adjacent wnaf entry, but as that entry represents a value that is 2^{5} greater than this one,
    // we actually need to add 1, not 32. Clear as mud, yes?

    // The easiest way of doing this is by adding 16 into w.
    // If m > 15 then the 5th bit will be high w. So adding 16 will trigger an
    // overflow and add into the 6th bit. All lower order bits don't matter because we're about to mask them off
    dup9 add dup10 and // stack state: w o
}

// starting stack state w o 260 0x1fe0 16 mask
#define WNAF_SLICE_B = takes(6) returns(6) {
    dup1 dup1 returndatasize sub and
    // w' w o x x 269 0x1fe0 16 mask
    dup8 dup2 mod
    // (w' % 269) w' w o 269 0x1fe0 16 mask
    mload dup10 and
    // x w' w o
    swap2
    // w w' x o
    div
    // w" x o
    swap2
    // o x w"
    add
    // o' w" 269 0x1fe0 16 mask
    dup2 dup10 add dup11 and
    // w''' o' w"
    swap2
    // w" o' w'''
    dup2
    // o' w" o' w'''
    mstore8
    // o' w'''
} // 72 gas

#define SET_WNAF_TABLE = takes(0) returns(0) {
    0x00002da05a0dc2607b5a3ccdf1c286208d3b7bfa501cf60e1291e762b7664000 0x1f mstore
    0xa8ed5c7b871c1f7a79103fdd13d6240e24d2bad218879542c817996661801da0 0x3f mstore
    0xca49108d623c85fbb5c7201c3f3f83da95193d7045bfe39d2353f4364c84346e 0x5f mstore
    0x4f44f692c01aecd22898a467a9f574a2eee82e97ab998f869801a5200b1dd6c0 0x7f mstore
    0xebea73093e50a00d99e25b3cb1a60d1bcff5f267574008dc46ff58ffb3a3e4ba 0x9f mstore
    0xb87527f9417d8a306205d5a01f03b4fd458363340c744f36600ca86449d48ece 0xbf mstore
    0x6b6f77e50af6abd2fe2019db118cefd25728a6d8d3849847c14a01f59ef4c563 0xdf mstore
    0x0c4f000849aeab57cacbbe19b16fb706b3782121dec54c20098b2abdf156f341 0xff mstore
    0x1eac096a91333e89511e70f0c000000000000000000000000000000000000000 0x11f mstore
}

#define ENDO_WNAF_FIXED = takes(2) returns(2) {
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
loop:
    WNAF_SLICE_B()
    33 dup3 lt wnaf_end jumpi
    WNAF_SLICE_A()
    dup1 32 lt loop jumpi
wnaf_end:
}

#define WNAF_INIT = takes(0) returns(6) {
    // add wnaf table to memory
    SET_WNAF_TABLE()
    // set up constants
    0x1000000000000000000000000000000000 // b
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 // mask b
    16 // 16 mask b
    0x1fe0 // 0x1fe0 16 mask b
    269 // 269 0x1fe0 16 mask b

    // compute calldata and memory offsets
    GET_NUMBER_OF_POINTS() // n
    dup1 dup1 add WNAF_START_LOCATION_MINUS_TWO() add       // m n
    swap1 0x06 shl        // s m 269 0x1fe0 16 mask b
}

#define FIND_FIRST_ENTRY = takes(0) returns(1) {
    WNAF_END_LOCATION_PLUS_32()  // m
search_next:
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 add
    dup1 mload iszero search_next jumpi
}


#define COMPUTE_WNAFS_HMM = takes(0) returns(0) {
    WNAF_INIT()
wnaf_start:
    0x01
    dup2 calldataload ENDOMORPHISM() // k1 k2 v s m 269 0x1fe0 16 mask b
    dup10 or
    swap1 dup10 or // k2 k1 v s m 269
wnaf_continue:
    dup5 dup4 add     // get wnaf memory offset, and add 'v'
                      // (if k2, v = 1, increasing mem index by 1. if k1, v = 0)
    ENDO_WNAF_FIXED() // w o k1 v s m 269 0x1fe0 16 mask b
    pop swap1                  // k1 o v s m 269 0x1fe0 16 mas kb
    0x01 dup4 sub swap3 wnaf_continue jumpi
    // x x x v s m 269 0x1fe0 16 mask b
    pop pop pop
    0x20 add    // s' m
    swap1 0x02 swap1 sub swap1 // s' m' // TODO optimize this
    dup1 calldatasize sub wnaf_start jumpi // s' m' 269 0x1fe0 16 mask b
    pop pop pop pop pop pop pop
}

// alternative WNAF using a jump table.
#define COMPUTE_WNAFS = takes(0) returns(0) {
    // what on earth?
    lsb_0 0x00 mstore // 0 00000
    lsb_1 0x20 mstore // 1 00001
    lsb_2 0x40 mstore // 2 00010
    lsb_1 0x60 mstore // 3 00011
    lsb_3 0x80 mstore // 4 00100
    lsb_1 0xa0 mstore // 5 00101
    lsb_2 0xc0 mstore // 6 00110
    lsb_1 0xe0 mstore // 7 00111
    lsb_4 0x100 mstore // 8 01000
    lsb_1 0x120 mstore // 9 01001
    lsb_2 0x140 mstore // 10 01010
    lsb_1 0x160 mstore // 11 01011
    lsb_3 0x180 mstore // 12 01100
    lsb_1 0x1a0 mstore // 13 01101
    lsb_2 0x1c0 mstore // 14 01110
    lsb_1 0x1e0 mstore // 15 01111
    /* lsb_5 0x200 mstore // 16 10000
    lsb_1 0x220 mstore // 17 10001
    lsb_2 0x240 mstore // 18 10010
    lsb_1 0x260 mstore // 19 10011
    lsb_3 0x280 mstore // 20 10100
    lsb_1 0x2a0 mstore // 21 10101
    lsb_2 0x2c0 mstore // 22 10110
    lsb_1 0x2e0 mstore // 23 10111
    lsb_4 0x300 mstore // 24 11000
    lsb_1 0x320 mstore // 25 11001
    lsb_2 0x340 mstore // 26 11010
    lsb_1 0x360 mstore // 27 11011
    lsb_3 0x380 mstore // 28 11100
    lsb_1 0x3a0 mstore // 29 11101
    lsb_2 0x3c0 mstore // 30 11110
    lsb_1 0x3e0 mstore // 31 11111 */

        GET_NUMBER_OF_POINTS()         // n
        dup1 dup1 add WNAF_START_LOCATION_MINUS_TWO() add       // m n
        swap1 0x06 shl                // s m
    strange_wnaf_start:
        0x01
        dup2 calldataload ENDOMORPHISM() // k1 k2 v s m
        5 shl
        swap1 5 shl // k2 k1 v s m 269
    strange_wnaf_continue:
        dup5 dup4 add     // get wnaf memory offset, and add 'v'
        swap1

        // (if k2, v = 1, increasing mem index by 1. if k1, v = 0)
        dup1 WNAF_TABLE_MASK() and mload jump // and away we go?

    lsb_5:  // w o
        LITERAL<WNAF_SIZE+4>() shr               // w o
        swap1 LITERAL<WNAF_SIZE*0x20+0x80>() add      // o w
        dup2 LITERAL<WNAF_SIZE*0x20>() dup3 sub mstore8   // o w
        swap1               // w o
        0x10 add
        dup1 WNAF_TABLE_MASK() and mload jump
        
    lsb_4:  // w o
        LITERAL<WNAF_SIZE+3>() shr
        swap1 LITERAL<WNAF_SIZE*0x20+0x60>() add
        dup2 LITERAL<WNAF_SIZE*0x20>() dup3 sub mstore8
        swap1
        0x10 add
        dup1 WNAF_TABLE_MASK() and mload jump
        
    lsb_3:
        LITERAL<WNAF_SIZE+2>() shr
        swap1 LITERAL<WNAF_SIZE*0x20+0x40>() add
        dup2 LITERAL<WNAF_SIZE*0x20>() dup3 sub mstore8
        swap1
        0x10 add
        dup1 WNAF_TABLE_MASK() and mload jump

    lsb_2:
        LITERAL<WNAF_SIZE+1>() shr
        swap1 LITERAL<WNAF_SIZE*0x20+0x20>() add
        dup2 LITERAL<WNAF_SIZE*0x20>() dup3 sub mstore8
        swap1
        0x10 add
        dup1 WNAF_TABLE_MASK() and mload jump

    lsb_1:
        WNAF_SIZE() shr
        swap1 LITERAL<WNAF_SIZE*0x20>() add
        dup2 LITERAL<WNAF_SIZE*0x20>() dup3 sub mstore8
        swap1
        0x10 add
        dup1 WNAF_TABLE_MASK() and mload jump

    lsb_0:
        swap1 LITERAL<WNAF_TABLE_BITS*0x20>() add swap1
        0x1f dup2 gt strange_wnaf_not_finished jumpi


    // end of one WNAF loop.
        pop swap1                  // k1 o v s m 269 0x1fe0 16 mas kb
        0x01 dup4 sub swap3 strange_wnaf_continue jumpi
        // x x x v s m 269 0x1fe0 16 mask b

        pop pop pop
        0x20 add    // s' m
        swap1 0x02 swap1 sub swap1 // s' m' // TODO optimize this
        dup1 calldatasize sub strange_wnaf_start jumpi // s' m'
        pop pop
        wnaf_end jump


    strange_wnaf_not_finished:  // w o
        WNAF_TABLE_BITS() shr       // w o
        dup1 WNAF_TABLE_MASK() and mload jump

    wnaf_end:
}
