/// @dev Macro to split a 254 scalar k (mod n) into two ~127 bit scalars k1, k2
/// where k = k1 + k2\lambda and \lambda = cube root of unity modulo n
#define macro ENDOMORPHISM = takes(1) returns(2) {
    // One way of extracting short scalars k1, k2 is through lattice reduction
    // Calculate short basis scalars b1, b2 via the extended Euclidean algorithm
    // where b1 = a1.n + x and b2 = a2.n + y
    // and floor(b2/n) - floor(b1/n) = (a2 - a1) = n
    // One can then calculate floor(k.b2/n) = c1 and floor(-k.b1/n) = c2
    // c1, c2 calculated through Babai rounding and are half-length scalars
    // q1 = c1.b1 = k.b1.a1 and q2 = c2.b2 = -k.b2.a2
    // -(q1+q2) = -(k.b1.a1-k.b2.a2) = k2
    // k1 - k2\lambda = k
    // push group modulus n onto stack
    0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 dup1 dup1
    // we need to calculate k*b1. We require a full-width 512 bit multiplication,
    // see https://medium.com/wicketh/mathemagic-full-multiply-27650fec525d
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff // -1 n n k
    0x24ccef014a773d2cf7a7bd9d4391eb18d dup6 mulmod // mm n n n k
    0x24ccef014a773d2cf7a7bd9d4391eb18d dup6 mul    // bottom mm n n n k
    dup1 dup3 lt // x bottom mm n n n k
    swap2 sub sub // c2 n n n
    0x89d3256894d213e3 mulmod // q2 n n k

    0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 // n q2 n n k
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff // -1 n q2 n n k
    0x2d91d232ec7e0b3d7 dup7 mulmod // mm n q2 n n k
    0x2d91d232ec7e0b3d7 dup7 mul    // bottom mm n q2 n n k
    dup1 dup3 lt // x bottom mm
    swap2 sub sub // c1 n q2 n n k
    0x30644e72e131a029b85045b68181585cb8e665ff8b011694c1d039a872b0eed9 mulmod // q1 q2 n n k
    add sub                     // k2 n k
    swap2                   // k n k2
    0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 // n k n k2
    dup4 0xb3c4d79d41a917585bfc41088d8daaa78b17ea66b99c90dd mulmod // k2\lambda k n k2
    addmod // If k is already mod n then we don't need a modular reduction here (could replace with add sub)
    // k1 k2 
}