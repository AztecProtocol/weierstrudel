#include "endomorphism.huff"

// starting stack state o w 260 0x1fe0 16 mask
/**
 * @title single iteration of width-non-adjacent-form algorithm
 * @dev Starting stack state = o w c_269 c_0x1fe0 c_16 c_mask
 * We have two 'slice' macros that do the same thing, but variables 'o' and 'w'
 * have reversed stack positions. This is to reduce the number of swap ops we use.
 * We use 4 constants in this macro, which we require on the stack instead of using PUSH ops.
 * This is to reduce the code size of this macro (PUSH is at least 2 bytes, other opcodes are a single byte)
 * @param o current memory offset to latest wnaf entry
 * @param w the scalar we're creating our wnaf from
 * @param c_269 the integer '269' (base 10), used in a lookup table
 * @param c_0x1fe0 the integer '1fe0' (base 16), used as a mask in our lookup table
 * @param c_16 the integer '16' (base 10), used to mutate ```w``` for next iteration cycle
 * @param c_mask 256-bit integer with all bits set high, except the least significant 5 bits
 **/
#define WNAF_SLICE_A = takes(6) returns(1) {
    // Step 1: we need to isolate the least significant high bit of w
    // Can do this by taking w & -w
    // Instead of pushing '0' onto the stack (3 gas), we can get the 'return data size' of this EVM execution context.
    // As this contract doesn't call external contracts this will always be 0, and the opcode costs 2 gas.
    dup2 dup1 returndatasize sub and // stack state: w' o w

    // Step 2: use w' and the lookup table to calculate the bit index of the high bit in w'
    // We want to add this offset to 'o', which is our accumulated memory offset
    // So swap 'o' to the front of the stak in preparation
    swap1 // stack state: o w' w 269 0x1fe0 16 mask

    // We want to calculate w' mod 269; the literal needs to preceed w' so push it onto the stack
    // before duplicating w' (we don't consume w' as we need it later) and taking the modulus
    dup6 dup3 mod // stack state: (w' % 269) o w' w 269 0x1fe0 16 mask

    // use the result to byte-address the lookup table we stored
    // and mask off the byte corresponding to the bit index,
    // we use 0x1fe0 instead of 0xff because the table entry is shifted by 5 bits
    // this is because we use this value to address words in memory, so '1' needs to be '32'
    mload dup8 and // stack state: x o w' w

    // Tadaa, we have our index, no conditional branching in sight
    // We need this value to find the current byte-offset to store our wnaf, so add it straight to 'o'
    add // stack state: o' w' w

    // Now we know *where* to store the next wnaf section, we need to figure out *what* to store
    // Our scalar has an abritrary amount of leading 0 bits we need to remove, we can use w' as
    // our divisor without explicitly figuring out how many bits need to be culled
    swap2 // stack state: w w' o'
    div  // stack state: w o'

    // We want to store our wnaf entry at byte position 'o'.
    // We've divided w by the least significant bit in w, so we know that
    // our wnaf entry is in the least significant 5 bits of 'w'.
    // Instead of masking off the higher order bits, we can use mstore8
    // to store the least significant byte of 'w' at position 'o'.
    // We're storing multiple wnaf entries in a single EVM word, so it's cheaper
    // to mask off the unwanted 3 high bits per-evm-word, which we can do in the main loop
    dup1 dup3 mstore8 // stack state: w o' 269 0x1fe0 16 mask

    // We need to prepare our scalar for the next round of iteration
    // We've already stored the next 5 bits of the wnaf in our fragment at memory offset 'o'
    // So we need to zero out the 5 least significant bits of w so we don't double-count.

    // i.e. we calculate  w = (w & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    // (the literal has every bit set high except the least significant 5)

    // There is one catch. If our wnaf fragment is negative (> 15), we need to add 2^{w} (32) to the scalar w.
    // This is because we're subtracting (32 - m) at this bit position.
    // So we need to add in 32 at the adjacent wnaf entry, but as that entry represents a value that is 2^{5} greater than this one,
    // we actually need to add 1, not 32. Clear as mud, yes?

    // The easiest way of doing this is by adding 16 into w.
    // If m > 15 then the 5th bit will be high w. So adding 16 will trigger an
    // overflow and add into the 6th bit. All lower order bits don't matter because we're about to mask them off
    dup7 add dup8 and // stack state: w o
}

// starting stack state w o 260 0x1fe0 16 mask
#define WNAF_SLICE_B = takes(6) returns(1) {
    dup1 dup1 returndatasize sub and
    // w' w o 269 0x1fe0 16 mask
    dup6 dup2 mod
    // (w' % 269) w' w o 269 0x1fe0 16 mask
    mload dup8 and
    // x w' w o
    swap2
    // w w' x o
    div
    // w" x o
    swap2
    // o x w"
    add
    // o' w" 269 0x1fe0 16 mask
    dup2 dup8 add dup9 and
    // w''' o' w"
    swap2
    // w" o' w'''
    dup2
    // o' w" o' w'''
    mstore8
    // o' w'''
}

#define SET_WNAF_TABLE = takes(0) returns(0) {
    0x00002da05a0dc2607b5a3ccdf1c286208d3b7bfa501cf60e1291e762b7664000 0x1f mstore
    0xa8ed5c7b871c1f7a79103fdd13d6240e24d2bad218879542c817996661801da0 0x3f mstore
    0xca49108d623c85fbb5c7201c3f3f83da95193d7045bfe39d2353f4364c84346e 0x5f mstore
    0x4f44f692c01aecd22898a467a9f574a2eee82e97ab998f869801a5200b1dd6c0 0x7f mstore
    0xebea73093e50a00d99e25b3cb1a60d1bcff5f267574008dc46ff58ffb3a3e4ba 0x9f mstore
    0xb87527f9417d8a306205d5a01f03b4fd458363340c744f36600ca86449d48ece 0xbf mstore
    0x6b6f77e50af6abd2fe2019db118cefd25728a6d8d3849847c14a01f59ef4c563 0xdf mstore
    0x0c4f000849aeab57cacbbe19b16fb706b3782121dec54c20098b2abdf156f341 0xff mstore
    0x1eac096a91333e89511e70f0c000000000000000000000000000000000000000 0x11f mstore
}

#define ENDO_WNAF_FIXED = takes(2) returns(1) {
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
    WNAF_SLICE_B()
    WNAF_SLICE_A()
loop:
    WNAF_SLICE_B()
    33 dup3 lt wnaf_end jumpi
    WNAF_SLICE_A()
    dup1 32 lt loop jumpi
wnaf_end:
}

#define WNAF_INIT = takes(0) returns(1) {
    // add wnaf table to memory
    SET_WNAF_TABLE()
    // set up constants
    0x1000000000000000000000000000000000 // b
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 // mask b
    16 // 16 mask b
    0x1fe0 // 0x1fe0 16 mask b
    269 // 269 0x1fe0 16 mask b

    // compute calldata and memory offsets
    0x60 calldatasize div // n
    dup1 dup1 add 0x103e add       // m n
    swap1 0x40 mul        // s m 269 0x1fe0 16 mask b
}


#define FIND_FIRST_ENTRY = takes(0) returns(1) {
    0x2040  // m
search_next:
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 add
    dup1 mload iszero search_next jumpi
}

// starting stack state = s m
// m = memory location of start of next wnaf
// s = calldata location of start of wnaf
#define COMPUTE_WNAFS = takes(0) returns(1) {
    WNAF_INIT()
wnaf_start:
    dup1 calldataload ENDOMORPHISM()
    // k1 k2 m s 269 0x1fe0 16 mask b
    // We want to add 2^{133} to each scalar k1 and k2.
    // This is so that our hardcoded loop doesn't overwrite our most significant wnaf entry with zeroes
    swap1 0x200 mstore    // k2 s m 269 0x1fe0 16 mask b // TODO remove memory storage blahblah
    dup8 or // k2' s m
    dup3 ENDO_WNAF_FIXED() // w o k2 s m 269 0x1fe0 16 mask b
    pop pop
    // k2 s m 269 0x1fe0 16 mask b
    0x200 mload dup8 or
    dup3 1 add ENDO_WNAF_FIXED() // w o s m 269 0x1fe0 16 mask b
    pop pop

    // stack state: s m 269 0x1fe0 16 mas kb

    0x20 add    // s' m
    swap1 2 swap1 sub swap1 // s' m' // TODO optimize this
    dup1 calldatasize sub wnaf_start jumpi // s' m' 269 0x1fe0 16 mask b
    pop pop pop pop pop pop pop
    FIND_FIRST_ENTRY()
    0x00 0x200 mstore

    0x1020 mstore
}